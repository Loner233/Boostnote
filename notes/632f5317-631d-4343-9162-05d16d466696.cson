createdAt: "2019-07-24T07:44:38.367Z"
updatedAt: "2019-07-24T07:50:58.903Z"
type: "MARKDOWN_NOTE"
folder: "7ad16a328420ce2c1cef"
title: "Scala复习-自类型"
tags: []
content: '''
  # Scala复习-自类型
  自类型用于声明一个特质必须混入其他特质,尽管改特质没有直接扩展其他特质.这使得所依赖的成员可以在没有导入的情况下使用.
  语法:`someIdentifier:SomeOtherTrait =>`
  ```scala
  trait User {
    def username: String
  }
  
  trait Tweeter {
    this: User =>  // 重新赋予 this 的类型
    def tweet(tweetText: String) = println(s"$username: $tweetText")
  }
  
  class VerifiedTweeter(val username_ : String) extends Tweeter with User {  // 我们混入特质 User 因为 Tweeter 需要
  	def username = s"real $username_"
  }
  
  val realBeyoncé = new VerifiedTweeter("Beyoncé")
  realBeyoncé.tweet("Just spilled my glass of lemonade")  // 打印出 "real Beyoncé: Just spilled my glass of lemonade"
  ```
  因为在特质`trait Tweeter`中定义了`this: User =>`, 现在变量 `username` 可以在`tweet`方法内使用.
  这意味着由于`VerifiedTweeter`继承了`Tweeter`,它还必须混入`User`(使用`with User`)这个mixin
'''
linesHighlighted: []
isStarred: false
isTrashed: false
