createdAt: "2019-05-16T01:30:53.234Z"
updatedAt: "2019-08-14T02:00:50.420Z"
type: "MARKDOWN_NOTE"
folder: "3ed9013aac4316501eaf"
title: "python整数比较的坑"
tags: []
content: '''
  # python整数比较的坑
  在Python中一切都是对象，整数也是对象，在比较两个整数是有两个运算符==和is，他们的区别是：
  - `is`比较的是两个整数对象的id值是否相等，也就是比较两个引用是否代表了内存中同一个地址。
  - `==`比较的是两个整数对象的内容是否相等，使用`==`时其实是调用了对象的`__eq__()`方法
  
  ```python
  x = y = -1
  while True:
      x += 1
      y += 1
      if x is y:
          print('%d is %d'%(x,y))
      else:
          print('Attention! %d is not %d'%(x,y))
          break
  x = y = 0
  while True:
      x -= 1
      y -= 1
      if x is y:
          print('%d is %d'%(x,y))
      else:
          print('Attention! %d is not %d'%(x,y))
          break
  ```
  对于整数对象，Python把一些频繁使用的整数对象缓存起来，保存到一个叫small_ints的链表中，在Python的整个生命周期内，任何需要引用这些整数对象的地方，都不再重新创建新的对象，而是直接引用缓存中的对象。Python把频繁使用的整数对象的值定在[-5, 256]这个区间，如果需要这个范围的整数，就直接从small_ints中获取引用而不是临时创建新的对象。因为大于256或小于-5的整数不在该范围之内，所以就算两个整数的值是一样，但它们是不同的对象。
  
  ```python
  a = 257
  def main():
      b = 257
      c = 257
      print(b is c)
      print(a is b)
      print(a is c)
  
  if __name__ == "__main__":
      main()
  ```
  结果：True False False
  
  代码块是程序的一个最小的基本执行单位，一个模块文件、一个函数体、一个类、交互式命令中的单行代码都叫做一个代码块。上面的代码由两个代码块构成，a = 257是一个代码块，main函数是另外一个代码块。Python内部为了进一步提高性能，凡是在一个代码块中创建的整数对象，如果值不在small_ints缓存范围之内，但在同一个代码块中已经存在一个值与其相同的整数对象了，那么就直接引用该对象，否则创建一个新的对象出来，这条规则对不在small_ints范围的负数并不适用，对负数值浮点数也不适用，但对非负浮点数和字符串都是适用的
'''
linesHighlighted: []
isStarred: false
isTrashed: false
