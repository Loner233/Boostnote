createdAt: "2019-09-19T03:14:27.577Z"
updatedAt: "2019-09-19T05:25:48.762Z"
type: "MARKDOWN_NOTE"
folder: "3ed9013aac4316501eaf"
title: "Python运算符重载"
tags: []
content: '''
  # Python运算符重载
  - 不能重载内置类型的运算符
  - 不能新建运算符，只能重载现有运算符
  - 某些运算符不能重载——`is`、`and`、`or` 和 `not`
  
  ### 重载一元运算符
  - `-`(`__neg__`) 一元取负算术运算符。如果`x`是`-2`,那么`-x == 2`。
  - `+`(`__pos__`) 一元取正算术运算符。 通常， `x == +x`,但也有例外(`Decimal`精度不一致时。)
  - `~`(`__invert__`) 对整数按位取反，定义为`~x == -(x + 1)`。如果`x`是`2`，那么`~x == -3`
  ```python
      def __abs__(self):
          return math.sqrt(sum(x * x for x in self))
  
      def __neg__(self):
          return Vector(-x for x in self)  # 构建一个新 Vector 实例，把 self 的每个分量都取反。
  
      def __pos__(self):
          return Vector(self)  # 构建一个新 Vector 实例，传入 self 的各个分量。
  ```
  
  ### 重载二元运算符
  |运算符|正向方法|反向方法|就地方法|说明|
  |----|----|----|----|----|
  |`+`|`__add__`|`__radd__`|`__iadd__`|加法或拼接|
  |`-`|`__sub__`|`__rsub__`|`__isub__`|减法|
  |`*`|`__mul__`|`__rmul__`|`__imul__`|乘法或重复复制|
  |`/`|`__truediv__`|`__rtruediv__`|`__itruediv__`|除法|
  |`//`|`__floordiv__`|`__rfloordiv__`|`__ifloordiv__`|整除|
  |`%`|`__mod__`|`__rmod__`|`__imod__`|取模|
  |`divmod()`|`__divmod__`|`__rdivmod__`|`__idivmod__`|返回由整除的商和模数组成的元组|
  |`**，pow()`|`__pow__`|`__rpow__`|`__ipow__`|取幂|
  |`@`|`__matmul__`|`__rmatmul__`|`__imatmul__`|矩阵乘法|
  |`&`|`__and__`|`__rand__`|`__iand__`|位与|
  |`|`|`__or__`|`__ror__`|`__ior__`|位或|
  |`^`|`__xor__`|`__rxor__`|`__ixor__`|位异或|
  |`<<`|`__lshift__`|`__rlshift__`|`__ilshift__`|按位左移|
  |`>>`|`__rshift__`|`__rrshift__`|`__irshift__`|按位右移|
  ```python
  def __mul__(self, scalar):
      if isinstance(scalar, numbers.Real):  # 检查数值类型， 记得引入 numbers
          return Vector(n * scalar for n in self)
      else:  # 让 Python 尝试在 scalar 操作数上调用 __rmul__ 方法。
          return NotImplemented
  
  def __rmul__(self, scalar):
      return self * scalar  # 委托给 __mul__ 方法。
  ```
  为了支持涉及不同类型的运算，`Python`为中缀运算符特殊方法提供了特殊的分派机制。
  例如，对于表达式`a + b`，解释其绘制型以下几个步骤：
  __1__.如果`a`有`__add__`方法，且返回值不是`NotImplemented`,则调用`a.__add__(b)`,然后返回结果
  __2__.如果`a`没有`__add__`方法，或者调用`__add__`方法返回`NotImplemented`，检查`b`有没有`__radd__`方法，如果有，且没有返回`NotImplemented`，调用`b.__radd__(a)`,然后返回结果.
  __3__.如果`b`没有`__radd__`方法，或者调用`__radd__`方法返回`NotImplemented`,抛出`TypeError`,并在错误消息中指明操作数类型不支持。
  > NotImplemented和NotImplementedError的区别
  > 前者是特殊的单例值，如果中缀运算符特殊方法不能处理给定的操作数，那么要把它返回（return）给解释器。
  > NotImplementedError 是一种异常，抽象类中的占位方法把它抛出（raise），提醒子类必须覆盖。
  
  ### 重载比较运算符
  `==, !=, >, <, >=, <=`
  特殊的points:
  - 对于`==`来说，正向和反向调用的都是`__eq__`方法，只是把参数对调了;
  - 正向的`__gt__`方法调用的是反向的`__lt__`方法，并把参数对调;
  - 对于`==`和`！=`来说，如果反向调用失败，`Python`会比较对象的`ID`,而不抛出`TypeError`
  |中缀运算符|正向方法调用|反向方法调用|后备机制|
  |----|----|----|----|
  |`a == b`|`a.__eq__(b)`|`b.__eq__(a)`|返回 `id(a) == id(b)`|
  |`a != b`|`a.__ne__(b)`|`b.__ne__(a)`|返回 `not (a == b)`|
  |`a > b`|`a.__gt__(b)`|`b.__lt__(a)`|抛出 `TypeError`|
  |`a < b`|`a.__lt__(b)`|`b.__gt__(a)`|抛出 `TypeError`|
  |`a >= b`|`a.__ge__(b)`|`b.__le__(a)`|抛出 `TypeError`|
  |`a <= b`|`a.__le__(b)`|`b.__ge__(a)`|抛出 `TypeError`|
  ### 重载增量运算符
  - `+=`(`__iadd__`) 就地修改左边的对象，加
  - `*=`(`__imul__`) 就地修改左边的对象，乘
  如果没有实现该运算符，`a += b`的作用与`a = a + b`完全一样。
  如果实现了就地运算符方法，比如`__iadd__`，计算`a += b`的结果时会调用实现的就地运算符的方法。
  就地表明他们会对左边进行修改，而不会创建新的对象作为结果。
'''
linesHighlighted: []
isStarred: false
isTrashed: false
