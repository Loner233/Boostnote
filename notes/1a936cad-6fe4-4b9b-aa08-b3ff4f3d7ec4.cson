createdAt: "2019-08-13T05:32:10.161Z"
updatedAt: "2019-08-13T07:06:44.382Z"
type: "MARKDOWN_NOTE"
folder: "91678286fbe5c256d96d"
title: "tf.linalg"
tags: []
content: '''
  # tf.linalg
  #### `adjoint`
  对最后两个维度进行转置，并求共轭,当然如果不是复数的情况可以忽略共轭
  ```python
  a = tf.constant([[[1,2,3],[4,5,6]]])   #(1,2,3)
  tf.linalg.adjoint(a)                   #(1,3,2)
  
  ##############################################################
  x = tf.constant([[1 + 1j, 2 + 2j, 3 + 3j],
                   [4 + 4j, 5 + 5j, 6 + 6j]])
  tf.linalg.adjoint(x)  # [[1 - 1j, 4 - 4j],
                        #  [2 - 2j, 5 - 5j],
                        #  [3 - 3j, 6 - 6j]]
  ```
  
  #### `band_part`
  主要功能是以对角线为中心，取它的副对角线部分，其他部分用0填充
  函数原型：
  ```python
  tf.linalg.band_part(
      input,
      num_lower,
      num_upper,
      name=None
  )
  ```
  - input: 输入的张量
  - num_lower： 表示下三角矩阵保留的副对角线数量，相当于下三角的带宽，负数时全部保留。
  - num_upper： 表示上三角矩阵保留的副对角线数量，相当于上三角的带宽，负数时全部保留。
  
  #### `cholesky` 还需要再去了解
  输入是一个张量的形状：[..., M, M],其最内侧的2个维形成方形矩阵,具有与上述单矩阵Cholesky 分解相同的约束条件.输出是与包含所有输入子矩阵 [..,:,:] 的 Cholesky 分解的输入相同形状的张量.
  ```python
  tf.linalg.cholesky(
      input,
      name=None
  )
  ```
  
  #### `matmul`
  计算两个矩阵的积,输入可以是高维向量，其中最内部的两个维度是需要符合矩阵的乘法需求的
  ```python
  tf.linalg.matmul(
      a,
      b,
      transpose_a=False,
      transpose_b=False,
      adjoint_a=False,
      adjoint_b=False,
      a_is_sparse=False,
      b_is_sparse=False,
      name=None
  )
  ```
  ```python
  a = tf.constant([1,2,3,4,5,6,7,8,9,10,11,12],shape=(2,2,3))
  b = tf.constant([7,8,9,10,11,12],shape=(2,3,1))
  tf.linalg.matmul(a,b)```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
